# &[ $LF_LEVEL -eq 1 || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""

${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# Basic Settings
set hidden false
set ignorecase true
set icons true
set cursorpreviewfmt "\033[7m"

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd dragon %dragon-drop -a -x "$fx"
cmd dragon-stay %dragon-drop -a "$fx"
cmd dragon-individual %dragon-drop "$fx"

cmd setwallpaper ${{
    feh --bg-fill --no-xinerama "$f"
    betterlockscreen -u "$f" --fx
    convert "$f" ~/.config/wallpaper.jpg
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

# Bindings
map d
map m

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

map au unarchive

# Basic Functions
map . set hidden!
map dd trash
map dr restore_trash
map p paste
map c cut
map y copy
map <enter> open
map r reload
map mf mkfile
map md mkdir
map mm mark-save
map mr mark-remove
map bg setwallpaper
map C clear

# Dragon Mapping
map dg dragon
map ds dragon-stay
map di dragon-individual

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map R edit-config

cmd copy_to_clipboard %{{
    if type pbcopy > /dev/null 2>&1; then
    printf '%s' "$f" | pbcopy
    elif type xsel > /dev/null 2>&1; then
    printf '%s' "$f" | xsel -ib
    fi
}}
map <c-c> :copy_to_clipboard

cmd z %{{
	result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
	result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}
